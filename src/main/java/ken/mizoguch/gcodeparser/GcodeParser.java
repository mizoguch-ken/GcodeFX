/* GcodeParser.java */
/* Generated By:JavaCC: Do not edit this line. GcodeParser.java */
package ken.mizoguch.gcodeparser;

import java.util.ArrayList;
import java.util.List;

public class GcodeParser implements GcodeParserConstants {

  final public static String VERSION = "2017.09.12";

  final private List<String> bytecodes = new ArrayList<String>();
  final private List<ParseException> parseErrors = new ArrayList<ParseException>();

  public List<String> getBytecodes() {
    return bytecodes;
  }

  public boolean isErrors() {
    return !parseErrors.isEmpty();
  }

  public List<ParseException> getParseErrors() {
    return parseErrors;
  }

  private void addBytecode(int kind) {
    bytecodes.add(Integer.toString(kind));
  }

  private void addBytecode(int kind, String image) {
    bytecodes.add(Integer.toString(kind) + "\t" + image);
  }

  private void addBytecode(int kind, int image) {
    bytecodes.add(Integer.toString(kind) + "\t" + Integer.toString(image));
  }

  private void recoverParse(ParseException ex, int recoveryPoint) {
    parseErrors.add(ex);
    Token t;
    do {
      t = getNextToken();
    } while((t.kind != EOF) && (t.kind != recoveryPoint));
  }

  final public void Start() throws ParseException {
    Program();
    jj_consume_token(0);
}

  final public void Program() throws ParseException {String block; int linenumber = 0;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case A:
      case B:
      case C:
      case D:
      case E:
      case F:
      case G:
      case H:
      case I:
      case J:
      case K:
      case L:
      case M:
      case N:
      case O:
      case P:
      case Q:
      case R:
      case S:
      case T:
      case U:
      case V:
      case W:
      case X:
      case Y:
      case Z:
      case GOTO:
      case IF:
      case WHILE:
      case DO:
      case END:
      case SETVN:
      case SIN:
      case COS:
      case TAN:
      case ASIN:
      case ACOS:
      case ATAN:
      case SQRT:
      case ABS:
      case BIN:
      case BCD:
      case ROUND:
      case FIX:
      case FUP:
      case LN:
      case EXP:
      case POW:
      case ADP:
      case ATAN2:
      case POPEN:
      case PCLOS:
      case BPRNT:
      case DPRNT:
      case EOB:
      case SHARP:
      case OPEN_PARENTHESES:
      case PLUS:
      case MINUS:
      case SLASH:
      case COLON:
      case SEMICOLON:
      case LESS_THAN:
      case AT:
      case OPENING_BRACKET:
      case NUMBER:
      case FLOAT:
      case VARIABLE_NUMBER:
      case VARIABLE_FLOAT:
      case VARIABLE_STRING:
      case VARIABLE_SHARP:
      case VARIABLE_AT:
      case VARIABLE_OPENING_BRACKET:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      try {
        block = Block();
addBytecode(EOB, linenumber++ + "$$" + block);
      } catch (ParseException ex) {
recoverParse(ex, EOB);
      }
    }
}

  final public String Block() throws ParseException {String statement, statements = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case A:
    case B:
    case C:
    case D:
    case E:
    case F:
    case G:
    case H:
    case I:
    case J:
    case K:
    case L:
    case M:
    case N:
    case O:
    case P:
    case Q:
    case R:
    case S:
    case T:
    case U:
    case V:
    case W:
    case X:
    case Y:
    case Z:
    case GOTO:
    case IF:
    case WHILE:
    case DO:
    case END:
    case SETVN:
    case SIN:
    case COS:
    case TAN:
    case ASIN:
    case ACOS:
    case ATAN:
    case SQRT:
    case ABS:
    case BIN:
    case BCD:
    case ROUND:
    case FIX:
    case FUP:
    case LN:
    case EXP:
    case POW:
    case ADP:
    case ATAN2:
    case POPEN:
    case PCLOS:
    case BPRNT:
    case DPRNT:
    case SHARP:
    case OPEN_PARENTHESES:
    case PLUS:
    case MINUS:
    case SLASH:
    case COLON:
    case SEMICOLON:
    case LESS_THAN:
    case AT:
    case OPENING_BRACKET:
    case NUMBER:
    case FLOAT:
    case VARIABLE_NUMBER:
    case VARIABLE_FLOAT:
    case VARIABLE_STRING:
    case VARIABLE_SHARP:
    case VARIABLE_AT:
    case VARIABLE_OPENING_BRACKET:{
      label_2:
      while (true) {
        statement = Statements();
statements += statement;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case A:
        case B:
        case C:
        case D:
        case E:
        case F:
        case G:
        case H:
        case I:
        case J:
        case K:
        case L:
        case M:
        case N:
        case O:
        case P:
        case Q:
        case R:
        case S:
        case T:
        case U:
        case V:
        case W:
        case X:
        case Y:
        case Z:
        case GOTO:
        case IF:
        case WHILE:
        case DO:
        case END:
        case SETVN:
        case SIN:
        case COS:
        case TAN:
        case ASIN:
        case ACOS:
        case ATAN:
        case SQRT:
        case ABS:
        case BIN:
        case BCD:
        case ROUND:
        case FIX:
        case FUP:
        case LN:
        case EXP:
        case POW:
        case ADP:
        case ATAN2:
        case POPEN:
        case PCLOS:
        case BPRNT:
        case DPRNT:
        case SHARP:
        case OPEN_PARENTHESES:
        case PLUS:
        case MINUS:
        case SLASH:
        case COLON:
        case SEMICOLON:
        case LESS_THAN:
        case AT:
        case OPENING_BRACKET:
        case NUMBER:
        case FLOAT:
        case VARIABLE_NUMBER:
        case VARIABLE_FLOAT:
        case VARIABLE_STRING:
        case VARIABLE_SHARP:
        case VARIABLE_AT:
        case VARIABLE_OPENING_BRACKET:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOB:{
        jj_consume_token(EOB);
        break;
        }
      case 0:{
        jj_consume_token(0);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return statements;}
      break;
      }
    case EOB:{
      jj_consume_token(EOB);
{if ("" != null) return statements;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String Statements() throws ParseException {String statement;
    if (jj_2_1(3)) {
      statement = ProgramNumberStatement();
{if ("" != null) return statement;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SLASH:{
        statement = BlockSkipStatement();
{if ("" != null) return statement;}
        break;
        }
      case A:
      case B:
      case C:
      case D:
      case E:
      case F:
      case G:
      case H:
      case I:
      case J:
      case K:
      case L:
      case M:
      case N:
      case O:
      case P:
      case Q:
      case R:
      case S:
      case T:
      case U:
      case V:
      case W:
      case X:
      case Y:
      case Z:{
        statement = WordStatement();
{if ("" != null) return statement;}
        break;
        }
      case GOTO:{
        statement = GotoStatement();
{if ("" != null) return statement;}
        break;
        }
      case IF:{
        statement = IfStatement();
{if ("" != null) return statement;}
        break;
        }
      case WHILE:{
        statement = WhileStatement();
{if ("" != null) return statement;}
        break;
        }
      case DO:{
        statement = DoStatement();
{if ("" != null) return statement;}
        break;
        }
      case END:{
        statement = EndStatement();
{if ("" != null) return statement;}
        break;
        }
      case SIN:
      case COS:
      case TAN:
      case ASIN:
      case ACOS:
      case ATAN:
      case SQRT:
      case ABS:
      case BIN:
      case BCD:
      case ROUND:
      case FIX:
      case FUP:
      case LN:
      case EXP:
      case POW:
      case ADP:
      case ATAN2:
      case SHARP:
      case PLUS:
      case MINUS:
      case AT:
      case OPENING_BRACKET:
      case NUMBER:
      case FLOAT:
      case VARIABLE_NUMBER:
      case VARIABLE_FLOAT:
      case VARIABLE_STRING:
      case VARIABLE_SHARP:
      case VARIABLE_AT:
      case VARIABLE_OPENING_BRACKET:{
        statement = VariableAssignStatement();
{if ("" != null) return statement;}
        break;
        }
      case SETVN:{
        statement = SetvnStatement();
{if ("" != null) return statement;}
        break;
        }
      case OPEN_PARENTHESES:{
        statement = CommentStatement();
{if ("" != null) return statement;}
        break;
        }
      case SEMICOLON:{
        statement = LineCommentStatement();
{if ("" != null) return statement;}
        break;
        }
      case POPEN:{
        statement = PopenStatement();
{if ("" != null) return statement;}
        break;
        }
      case PCLOS:{
        statement = PclosStatement();
{if ("" != null) return statement;}
        break;
        }
      case BPRNT:{
        statement = BprntStatement();
{if ("" != null) return statement;}
        break;
        }
      case DPRNT:{
        statement = DprntStatement();
{if ("" != null) return statement;}
        break;
        }
      case LESS_THAN:{
        statement = FilenameStatement();
{if ("" != null) return statement;}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String ProgramNumberStatement() throws ParseException {Token tkn;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case O:{
      jj_consume_token(O);
      tkn = jj_consume_token(NUMBER);
addBytecode(O, tkn.image);
{if ("" != null) return ("O" + tkn.image);}
      break;
      }
    case COLON:{
      jj_consume_token(COLON);
      tkn = jj_consume_token(NUMBER);
addBytecode(O, tkn.image);
{if ("" != null) return (":" + tkn.image);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String BlockSkipStatement() throws ParseException {Token tkn;
    if (jj_2_2(2)) {
      jj_consume_token(SLASH);
      tkn = jj_consume_token(NUMBER);
addBytecode(BLOCK_SKIP, tkn.image);
{if ("" != null) return ("/" + tkn.image);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SLASH:{
        jj_consume_token(SLASH);
addBytecode(BLOCK_SKIP, 0);
{if ("" != null) return "/";}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String WordStatement() throws ParseException {Token tkn; String expression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case A:{
      jj_consume_token(A);
      expression = Expression();
addBytecode(A);
{if ("" != null) return ("A" + expression);}
      break;
      }
    case B:{
      jj_consume_token(B);
      expression = Expression();
addBytecode(B);
{if ("" != null) return ("B" + expression);}
      break;
      }
    case C:{
      jj_consume_token(C);
      expression = Expression();
addBytecode(C);
{if ("" != null) return ("C" + expression);}
      break;
      }
    case D:{
      jj_consume_token(D);
      expression = Expression();
addBytecode(D);
{if ("" != null) return ("D" + expression);}
      break;
      }
    case E:{
      jj_consume_token(E);
      expression = Expression();
addBytecode(E);
{if ("" != null) return ("E" + expression);}
      break;
      }
    case F:{
      jj_consume_token(F);
      expression = Expression();
addBytecode(F);
{if ("" != null) return ("F" + expression);}
      break;
      }
    case G:{
      jj_consume_token(G);
      expression = Expression();
addBytecode(G);
{if ("" != null) return ("G" + expression);}
      break;
      }
    case H:{
      jj_consume_token(H);
      expression = Expression();
addBytecode(H);
{if ("" != null) return ("H" + expression);}
      break;
      }
    case I:{
      jj_consume_token(I);
      expression = Expression();
addBytecode(I);
{if ("" != null) return ("I" + expression);}
      break;
      }
    case J:{
      jj_consume_token(J);
      expression = Expression();
addBytecode(J);
{if ("" != null) return ("J" + expression);}
      break;
      }
    case K:{
      jj_consume_token(K);
      expression = Expression();
addBytecode(K);
{if ("" != null) return ("K" + expression);}
      break;
      }
    case L:{
      jj_consume_token(L);
      expression = Expression();
addBytecode(L);
{if ("" != null) return ("L" + expression);}
      break;
      }
    case M:{
      jj_consume_token(M);
      expression = Expression();
addBytecode(M);
{if ("" != null) return ("M" + expression);}
      break;
      }
    case N:{
      jj_consume_token(N);
      tkn = jj_consume_token(NUMBER);
addBytecode(N, tkn.image);
{if ("" != null) return ("N" + tkn.image);}
      break;
      }
    case O:{
      jj_consume_token(O);
      expression = Expression();
addBytecode(O);
{if ("" != null) return ("O" + expression);}
      break;
      }
    case P:{
      jj_consume_token(P);
      expression = Expression();
addBytecode(P);
{if ("" != null) return ("P" + expression);}
      break;
      }
    case Q:{
      jj_consume_token(Q);
      expression = Expression();
addBytecode(Q);
{if ("" != null) return ("Q" + expression);}
      break;
      }
    case R:{
      jj_consume_token(R);
      expression = Expression();
addBytecode(R);
{if ("" != null) return ("R" + expression);}
      break;
      }
    case S:{
      jj_consume_token(S);
      expression = Expression();
addBytecode(S);
{if ("" != null) return ("S" + expression);}
      break;
      }
    case T:{
      jj_consume_token(T);
      expression = Expression();
addBytecode(T);
{if ("" != null) return ("T" + expression);}
      break;
      }
    case U:{
      jj_consume_token(U);
      expression = Expression();
addBytecode(U);
{if ("" != null) return ("U" + expression);}
      break;
      }
    case V:{
      jj_consume_token(V);
      expression = Expression();
addBytecode(V);
{if ("" != null) return ("V" + expression);}
      break;
      }
    case W:{
      jj_consume_token(W);
      expression = Expression();
addBytecode(W);
{if ("" != null) return ("W" + expression);}
      break;
      }
    case X:{
      jj_consume_token(X);
      expression = Expression();
addBytecode(X);
{if ("" != null) return ("X" + expression);}
      break;
      }
    case Y:{
      jj_consume_token(Y);
      expression = Expression();
addBytecode(Y);
{if ("" != null) return ("Y" + expression);}
      break;
      }
    case Z:{
      jj_consume_token(Z);
      expression = Expression();
addBytecode(Z);
{if ("" != null) return ("Z" + expression);}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String GotoStatement() throws ParseException {String expression;
    jj_consume_token(GOTO);
    expression = Expression();
addBytecode(GOTO);
{if ("" != null) return ("GOTO" + expression);}
    throw new Error("Missing return statement in function");
}

  final public String IfStatement() throws ParseException {String expression, statement;
    jj_consume_token(IF);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(IF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THEN:{
      jj_consume_token(THEN);
      statement = VariableAssignStatement();
{if ("" != null) return ("IF" + "[" + expression + "]" + "THEN" + statement);}
      break;
      }
    case GOTO:{
      statement = GotoStatement();
{if ("" != null) return ("IF" + "[" + expression + "]" + statement);}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String WhileStatement() throws ParseException {Token tkn; String expression;
    jj_consume_token(WHILE);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
    jj_consume_token(DO);
    tkn = jj_consume_token(NUMBER);
addBytecode(WHILE, tkn.image);
{if ("" != null) return ("WHILE" + "[" + expression + "]" + "DO" + tkn.image);}
    throw new Error("Missing return statement in function");
}

  final public String DoStatement() throws ParseException {Token tkn;
    jj_consume_token(DO);
    tkn = jj_consume_token(NUMBER);
addBytecode(DO, tkn.image);
{if ("" != null) return ("DO" + tkn.image);}
    throw new Error("Missing return statement in function");
}

  final public String EndStatement() throws ParseException {Token tkn;
    jj_consume_token(END);
    tkn = jj_consume_token(NUMBER);
addBytecode(END, tkn.image);
{if ("" != null) return ("END" + tkn.image);}
    throw new Error("Missing return statement in function");
}

  final public String VariableAssignStatement() throws ParseException {String[] expression = new String[2];
    expression[0] = Expression();
    jj_consume_token(EQUALS);
    expression[1] = Expression();
addBytecode(EQUALS);
{if ("" != null) return (expression[0] + "=" + expression[1]);}
    throw new Error("Missing return statement in function");
}

  final public String SetvnStatement() throws ParseException {Token[] tkn = new Token[2]; String variables;
    jj_consume_token(SETVN);
    tkn[0] = jj_consume_token(SETVN_NUMBER);
    jj_consume_token(SETVN_OPENING_BRACKET);
    tkn[1] = jj_consume_token(SETVN_VARIABLE);
addBytecode(SETVN_VARIABLE, tkn[1].image);
variables = tkn[1].image;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SETVN_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(SETVN_COMMA);
      tkn[1] = jj_consume_token(SETVN_VARIABLE);
addBytecode(SETVN_VARIABLE, tkn[1].image);
variables += "," + tkn[1].image;
    }
    jj_consume_token(SETVN_CLOSING_BRACKET);
addBytecode(SETVN, tkn[0].image);
{if ("" != null) return ("SETVN" + tkn[0].image + "[" + variables + "]");}
    throw new Error("Missing return statement in function");
}

  final public String CommentStatement() throws ParseException {Token tkn;
    if (jj_2_3(2)) {
      jj_consume_token(OPEN_PARENTHESES);
      tkn = jj_consume_token(COMMENT);
      jj_consume_token(COMMENT_CLOSE_PARENTHESES);
addBytecode(COMMENT, tkn.image);
{if ("" != null) return ("(" + tkn.image + ")");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PARENTHESES:{
        jj_consume_token(OPEN_PARENTHESES);
        jj_consume_token(COMMENT_CLOSE_PARENTHESES);
addBytecode(COMMENT);
{if ("" != null) return ("(" + ")");}
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String LineCommentStatement() throws ParseException {Token tkn;
    if (jj_2_4(2)) {
      jj_consume_token(SEMICOLON);
      tkn = jj_consume_token(LINECOMMENT);
addBytecode(LINECOMMENT, tkn.image);
{if ("" != null) return (";" + tkn.image);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
addBytecode(LINECOMMENT);
{if ("" != null) return (";");}
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String PopenStatement() throws ParseException {
    jj_consume_token(POPEN);
addBytecode(POPEN);
{if ("" != null) return ("POPEN");}
    throw new Error("Missing return statement in function");
}

  final public String PclosStatement() throws ParseException {
    jj_consume_token(PCLOS);
addBytecode(PCLOS);
{if ("" != null) return ("PCLOS");}
    throw new Error("Missing return statement in function");
}

  final public String BprntStatement() throws ParseException {Token tkn;
    jj_consume_token(BPRNT);
    jj_consume_token(PRINT_OPENING_BRACKET);
    tkn = jj_consume_token(PRINT_MESSAGE);
    jj_consume_token(PRINT_CLOSING_BRACKET);
addBytecode(BPRNT, tkn.image);
{if ("" != null) return ("BPRNT" + "[" + tkn.image + "]");}
    throw new Error("Missing return statement in function");
}

  final public String DprntStatement() throws ParseException {Token tkn;
    jj_consume_token(DPRNT);
    jj_consume_token(PRINT_OPENING_BRACKET);
    tkn = jj_consume_token(PRINT_MESSAGE);
    jj_consume_token(PRINT_CLOSING_BRACKET);
addBytecode(DPRNT, tkn.image);
{if ("" != null) return ("DPRNT" + "[" + tkn.image + "]");}
    throw new Error("Missing return statement in function");
}

  final public String FilenameStatement() throws ParseException {Token tkn;
    jj_consume_token(LESS_THAN);
    tkn = jj_consume_token(FILENAME);
    jj_consume_token(FILENAME_GREATER_THAN);
addBytecode(FILENAME, tkn.image);
{if ("" != null) return ("<" + tkn + ">");}
    throw new Error("Missing return statement in function");
}

  final public String Expression() throws ParseException {String expression, relationalExpression;
    relationalExpression = RelationalExpression();
expression = relationalExpression;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case OR:
      case XOR:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        relationalExpression = RelationalExpression();
addBytecode(AND);
expression += "AND" + relationalExpression;
        break;
        }
      case OR:{
        jj_consume_token(OR);
        relationalExpression = RelationalExpression();
addBytecode(OR);
expression += "OR" + relationalExpression;
        break;
        }
      case XOR:{
        jj_consume_token(XOR);
        relationalExpression = RelationalExpression();
addBytecode(XOR);
expression += "XOR" + relationalExpression;
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        relationalExpression = RelationalExpression();
addBytecode(MOD);
expression += "MOD" + relationalExpression;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  final public String RelationalExpression() throws ParseException {String expression, addingExpression;
    addingExpression = AddingExpression();
expression = addingExpression;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:
      case LT:
      case LE:
      case GT:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        addingExpression = AddingExpression();
addBytecode(EQ);
expression += "EQ" + addingExpression;
        break;
        }
      case NE:{
        jj_consume_token(NE);
        addingExpression = AddingExpression();
addBytecode(NE);
expression += "NE" + addingExpression;
        break;
        }
      case LT:{
        jj_consume_token(LT);
        addingExpression = AddingExpression();
addBytecode(LT);
expression += "LT" + addingExpression;
        break;
        }
      case LE:{
        jj_consume_token(LE);
        addingExpression = AddingExpression();
addBytecode(LE);
expression += "LE" + addingExpression;
        break;
        }
      case GT:{
        jj_consume_token(GT);
        addingExpression = AddingExpression();
addBytecode(GT);
expression += "GT" + addingExpression;
        break;
        }
      case GE:{
        jj_consume_token(GE);
        addingExpression = AddingExpression();
addBytecode(GE);
expression += "GE" + addingExpression;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  final public String AddingExpression() throws ParseException {String expression, multiplyingExpression;
    multiplyingExpression = MultiplyingExpression();
expression = multiplyingExpression;
    label_6:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        multiplyingExpression = MultiplyingExpression();
addBytecode(PLUS);
expression += "+" + multiplyingExpression;
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        multiplyingExpression = MultiplyingExpression();
addBytecode(MINUS);
expression += "-" + multiplyingExpression;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  final public String MultiplyingExpression() throws ParseException {String expression, signExpression;
    signExpression = SignExpression();
expression = signExpression;
    label_7:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SLASH:{
        jj_consume_token(SLASH);
        signExpression = SignExpression();
addBytecode(SLASH);
expression += "/" + signExpression;
        break;
        }
      case ASTERISK:{
        jj_consume_token(ASTERISK);
        signExpression = SignExpression();
addBytecode(ASTERISK);
expression += "*" + signExpression;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  final public String SignExpression() throws ParseException {String functions;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIN:
    case COS:
    case TAN:
    case ASIN:
    case ACOS:
    case ATAN:
    case SQRT:
    case ABS:
    case BIN:
    case BCD:
    case ROUND:
    case FIX:
    case FUP:
    case LN:
    case EXP:
    case POW:
    case ADP:
    case ATAN2:
    case SHARP:
    case AT:
    case OPENING_BRACKET:
    case NUMBER:
    case FLOAT:
    case VARIABLE_NUMBER:
    case VARIABLE_FLOAT:
    case VARIABLE_STRING:
    case VARIABLE_SHARP:
    case VARIABLE_AT:
    case VARIABLE_OPENING_BRACKET:{
      functions = Functions();
{if ("" != null) return functions;}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      functions = Functions();
addBytecode(SIGN_PLUS);
{if ("" != null) return ("+" + functions);}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      functions = Functions();
addBytecode(SIGN_MINUS);
{if ("" != null) return ("-" + functions);}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String Functions() throws ParseException {Token tkn; String expression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      tkn = jj_consume_token(NUMBER);
addBytecode(NUMBER, tkn.image);
{if ("" != null) return tkn.image;}
      break;
      }
    case FLOAT:{
      tkn = jj_consume_token(FLOAT);
addBytecode(FLOAT, tkn.image);
{if ("" != null) return tkn.image;}
      break;
      }
    case VARIABLE_NUMBER:{
      tkn = jj_consume_token(VARIABLE_NUMBER);
addBytecode(VARIABLE_NUMBER, tkn.image);
{if ("" != null) return tkn.image;}
      break;
      }
    case VARIABLE_FLOAT:{
      tkn = jj_consume_token(VARIABLE_FLOAT);
addBytecode(VARIABLE_FLOAT, tkn.image);
{if ("" != null) return tkn.image;}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      if (jj_2_7(2)) {
        tkn = jj_consume_token(VARIABLE_STRING);
        jj_consume_token(OPENING_BRACKET);
        expression = Expression();
        jj_consume_token(CLOSING_BRACKET);
addBytecode(VARIABLE_STRING_ARRAY, tkn.image);
{if ("" != null) return (tkn.image + "[" + expression + "]");}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VARIABLE_STRING:{
          tkn = jj_consume_token(VARIABLE_STRING);
addBytecode(VARIABLE_STRING, tkn.image);
{if ("" != null) return tkn.image;}
          break;
          }
        case SHARP:{
          jj_consume_token(SHARP);
          expression = Functions();
addBytecode(SHARP);
{if ("" != null) return ("#" + expression);}
          break;
          }
        case AT:{
          jj_consume_token(AT);
          expression = Functions();
addBytecode(AT);
{if ("" != null) return ("@" + expression);}
          break;
          }
        case VARIABLE_SHARP:{
          jj_consume_token(VARIABLE_SHARP);
          expression = Functions();
addBytecode(VARIABLE_SHARP);
{if ("" != null) return ("#" + expression);}
          break;
          }
        case VARIABLE_AT:{
          jj_consume_token(VARIABLE_AT);
          expression = Functions();
addBytecode(VARIABLE_AT);
{if ("" != null) return ("@" + expression);}
          break;
          }
        case OPENING_BRACKET:{
          jj_consume_token(OPENING_BRACKET);
          expression = Expression();
          jj_consume_token(CLOSING_BRACKET);
{if ("" != null) return ("[" + expression + "]");}
          break;
          }
        case VARIABLE_OPENING_BRACKET:{
          jj_consume_token(VARIABLE_OPENING_BRACKET);
          expression = Expression();
          jj_consume_token(CLOSING_BRACKET);
{if ("" != null) return ("[" + expression + "]");}
          break;
          }
        case SIN:{
          expression = SinFunction();
{if ("" != null) return expression;}
          break;
          }
        case COS:{
          expression = CosFunction();
{if ("" != null) return expression;}
          break;
          }
        case TAN:{
          expression = TanFunction();
{if ("" != null) return expression;}
          break;
          }
        case ASIN:{
          expression = AsinFunction();
{if ("" != null) return expression;}
          break;
          }
        case ACOS:{
          expression = AcosFunction();
{if ("" != null) return expression;}
          break;
          }
        case ATAN:
        case ATAN2:{
          expression = AtanFunction();
{if ("" != null) return expression;}
          break;
          }
        case SQRT:{
          expression = SqrtFunction();
{if ("" != null) return expression;}
          break;
          }
        case ABS:{
          expression = AbsFunction();
{if ("" != null) return expression;}
          break;
          }
        case BIN:{
          expression = BinFunction();
{if ("" != null) return expression;}
          break;
          }
        case BCD:{
          expression = BcdFunction();
{if ("" != null) return expression;}
          break;
          }
        case ROUND:{
          expression = RoundFunction();
{if ("" != null) return expression;}
          break;
          }
        case FIX:{
          expression = FixFunction();
{if ("" != null) return expression;}
          break;
          }
        case FUP:{
          expression = FupFunction();
{if ("" != null) return expression;}
          break;
          }
        case LN:{
          expression = LnFunction();
{if ("" != null) return expression;}
          break;
          }
        case EXP:{
          expression = ExpFunction();
{if ("" != null) return expression;}
          break;
          }
        case POW:{
          expression = PowFunction();
{if ("" != null) return expression;}
          break;
          }
        case ADP:{
          expression = AdpFunction();
{if ("" != null) return expression;}
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String SinFunction() throws ParseException {String expression;
    jj_consume_token(SIN);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(SIN);
{if ("" != null) return ("SIN" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String CosFunction() throws ParseException {String expression;
    jj_consume_token(COS);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(COS);
{if ("" != null) return ("COS" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String TanFunction() throws ParseException {String expression;
    jj_consume_token(TAN);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(TAN);
{if ("" != null) return ("TAN" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String AsinFunction() throws ParseException {String expression;
    jj_consume_token(ASIN);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(ASIN);
{if ("" != null) return ("ASIN" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String AcosFunction() throws ParseException {String expression;
    jj_consume_token(ACOS);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(ACOS);
{if ("" != null) return ("ACOS" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String AtanFunction() throws ParseException {String[] expression = new String[2];
    if (jj_2_8(5)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATAN:{
        jj_consume_token(ATAN);
        break;
        }
      case ATAN2:{
        jj_consume_token(ATAN2);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OPENING_BRACKET);
      expression[0] = Expression();
      jj_consume_token(CLOSING_BRACKET);
      jj_consume_token(SLASH);
      jj_consume_token(OPENING_BRACKET);
      expression[1] = Expression();
      jj_consume_token(CLOSING_BRACKET);
addBytecode(ATAN2);
{if ("" != null) return ("ATAN" + "[" + expression[0] + "]" + "/" + "[" + expression[1] + "]");}
    } else if (jj_2_9(4)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATAN:{
        jj_consume_token(ATAN);
        break;
        }
      case ATAN2:{
        jj_consume_token(ATAN2);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OPENING_BRACKET);
      expression[0] = Expression();
      jj_consume_token(COMMA);
      expression[1] = Expression();
      jj_consume_token(CLOSING_BRACKET);
addBytecode(ATAN2);
{if ("" != null) return ("ATAN" + "[" + expression[0] + "," + expression[1] + "]");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATAN:{
        jj_consume_token(ATAN);
        jj_consume_token(OPENING_BRACKET);
        expression[0] = Expression();
        jj_consume_token(CLOSING_BRACKET);
addBytecode(ATAN);
{if ("" != null) return ("ATAN" + "[" + expression[0] + "]");}
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String SqrtFunction() throws ParseException {String expression;
    jj_consume_token(SQRT);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(SQRT);
{if ("" != null) return ("SQRT" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String AbsFunction() throws ParseException {String expression;
    jj_consume_token(ABS);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(ABS);
{if ("" != null) return ("ABS" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String BinFunction() throws ParseException {String expression;
    jj_consume_token(BIN);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(BIN);
{if ("" != null) return ("BIN" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String BcdFunction() throws ParseException {String expression;
    jj_consume_token(BCD);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(BCD);
{if ("" != null) return ("BCD" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String RoundFunction() throws ParseException {String expression;
    jj_consume_token(ROUND);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(ROUND);
{if ("" != null) return ("ROUND" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String FixFunction() throws ParseException {String expression;
    jj_consume_token(FIX);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(FIX);
{if ("" != null) return ("FIX" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String FupFunction() throws ParseException {String expression;
    jj_consume_token(FUP);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(FUP);
{if ("" != null) return ("FUP" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String LnFunction() throws ParseException {String expression;
    jj_consume_token(LN);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(LN);
{if ("" != null) return ("LN" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String ExpFunction() throws ParseException {String expression;
    jj_consume_token(EXP);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(EXP);
{if ("" != null) return ("EXP" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String PowFunction() throws ParseException {String expression;
    jj_consume_token(POW);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(POW);
{if ("" != null) return ("POW" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  final public String AdpFunction() throws ParseException {String expression;
    jj_consume_token(ADP);
    jj_consume_token(OPENING_BRACKET);
    expression = Expression();
    jj_consume_token(CLOSING_BRACKET);
addBytecode(ADP);
{if ("" != null) return ("ADP" + "[" + expression + "]");}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(SHARP)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(VARIABLE_STRING)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(ADP)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(VARIABLE_STRING)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(VARIABLE_FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(POW)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(VARIABLE_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(EXP)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(LN)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(FUP)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(ASTERISK)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(FIX)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(ROUND)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(BCD)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(BIN)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(ATAN)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(CLOSING_BRACKET)) return true;
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(ACOS)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(ASIN)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(TAN)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(SLASH)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(O)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(LINECOMMENT)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(VARIABLE_OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(CLOSING_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(OPEN_PARENTHESES)) return true;
    if (jj_scan_token(COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(OPENING_BRACKET)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(CLOSING_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(VARIABLE_AT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(VARIABLE_SHARP)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GcodeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xfffc0000,0xfffc0000,0x0,0xfffc0000,0xfffc0000,0x0,0x0,0xfffc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0xe007bfff,0xe007bfff,0x0,0xe007bfff,0xe007bfff,0x1,0x0,0xfff,0x5000,0x0,0x0,0x0,0x780000,0x780000,0x1f800000,0x1f800000,0x0,0x0,0xe0000000,0x0,0xe0000000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0xaa5fffff,0xaa57ffff,0x80000,0xaa5fffff,0x2a57ffff,0x80000000,0x20000000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0xa000000,0x21000000,0xa107fff,0x0,0x107fff,0x4004,0x4004,0x4,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0xfc018a3,0xfc018a3,0x0,0xfc018a3,0xfc018a3,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0xfc018a0,0xc01800,0xf0000a0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GcodeParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GcodeParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GcodeParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GcodeParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GcodeParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GcodeParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GcodeParser(GcodeParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GcodeParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[167];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 24; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 167; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 9; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
