/* Generated By:JavaCC: Do not edit this line. GcodeParserConstants.java */
package ken.mizoguch.gcodeparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GcodeParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BLOCK_SKIP = 45;
  /** RegularExpression Id. */
  int SIGN_PLUS = 46;
  /** RegularExpression Id. */
  int SIGN_MINUS = 47;
  /** RegularExpression Id. */
  int VARIABLE_STRING_ARRAY = 48;
  /** RegularExpression Id. */
  int NAME = 49;
  /** RegularExpression Id. */
  int A = 50;
  /** RegularExpression Id. */
  int B = 51;
  /** RegularExpression Id. */
  int C = 52;
  /** RegularExpression Id. */
  int D = 53;
  /** RegularExpression Id. */
  int E = 54;
  /** RegularExpression Id. */
  int F = 55;
  /** RegularExpression Id. */
  int G = 56;
  /** RegularExpression Id. */
  int H = 57;
  /** RegularExpression Id. */
  int I = 58;
  /** RegularExpression Id. */
  int J = 59;
  /** RegularExpression Id. */
  int K = 60;
  /** RegularExpression Id. */
  int L = 61;
  /** RegularExpression Id. */
  int M = 62;
  /** RegularExpression Id. */
  int N = 63;
  /** RegularExpression Id. */
  int O = 64;
  /** RegularExpression Id. */
  int P = 65;
  /** RegularExpression Id. */
  int Q = 66;
  /** RegularExpression Id. */
  int R = 67;
  /** RegularExpression Id. */
  int S = 68;
  /** RegularExpression Id. */
  int T = 69;
  /** RegularExpression Id. */
  int U = 70;
  /** RegularExpression Id. */
  int V = 71;
  /** RegularExpression Id. */
  int W = 72;
  /** RegularExpression Id. */
  int X = 73;
  /** RegularExpression Id. */
  int Y = 74;
  /** RegularExpression Id. */
  int Z = 75;
  /** RegularExpression Id. */
  int GOTO = 76;
  /** RegularExpression Id. */
  int IF = 77;
  /** RegularExpression Id. */
  int THEN = 78;
  /** RegularExpression Id. */
  int WHILE = 79;
  /** RegularExpression Id. */
  int DO = 80;
  /** RegularExpression Id. */
  int END = 81;
  /** RegularExpression Id. */
  int SETVN = 82;
  /** RegularExpression Id. */
  int AND = 83;
  /** RegularExpression Id. */
  int OR = 84;
  /** RegularExpression Id. */
  int XOR = 85;
  /** RegularExpression Id. */
  int MOD = 86;
  /** RegularExpression Id. */
  int EQ = 87;
  /** RegularExpression Id. */
  int NE = 88;
  /** RegularExpression Id. */
  int LT = 89;
  /** RegularExpression Id. */
  int LE = 90;
  /** RegularExpression Id. */
  int GT = 91;
  /** RegularExpression Id. */
  int GE = 92;
  /** RegularExpression Id. */
  int SIN = 93;
  /** RegularExpression Id. */
  int COS = 94;
  /** RegularExpression Id. */
  int TAN = 95;
  /** RegularExpression Id. */
  int ASIN = 96;
  /** RegularExpression Id. */
  int ACOS = 97;
  /** RegularExpression Id. */
  int ATAN = 98;
  /** RegularExpression Id. */
  int SQRT = 99;
  /** RegularExpression Id. */
  int ABS = 100;
  /** RegularExpression Id. */
  int BIN = 101;
  /** RegularExpression Id. */
  int BCD = 102;
  /** RegularExpression Id. */
  int ROUND = 103;
  /** RegularExpression Id. */
  int FIX = 104;
  /** RegularExpression Id. */
  int FUP = 105;
  /** RegularExpression Id. */
  int LN = 106;
  /** RegularExpression Id. */
  int EXP = 107;
  /** RegularExpression Id. */
  int POW = 108;
  /** RegularExpression Id. */
  int ADP = 109;
  /** RegularExpression Id. */
  int ATAN2 = 110;
  /** RegularExpression Id. */
  int POPEN = 111;
  /** RegularExpression Id. */
  int PCLOS = 112;
  /** RegularExpression Id. */
  int BPRNT = 113;
  /** RegularExpression Id. */
  int DPRNT = 114;
  /** RegularExpression Id. */
  int EOB = 115;
  /** RegularExpression Id. */
  int SHARP = 116;
  /** RegularExpression Id. */
  int AMPERSAND = 117;
  /** RegularExpression Id. */
  int OPEN_PARENTHESES = 118;
  /** RegularExpression Id. */
  int CLOSE_PARENTHESES = 119;
  /** RegularExpression Id. */
  int ASTERISK = 120;
  /** RegularExpression Id. */
  int PLUS = 121;
  /** RegularExpression Id. */
  int COMMA = 122;
  /** RegularExpression Id. */
  int MINUS = 123;
  /** RegularExpression Id. */
  int DOT = 124;
  /** RegularExpression Id. */
  int SLASH = 125;
  /** RegularExpression Id. */
  int DIGIT = 126;
  /** RegularExpression Id. */
  int COLON = 127;
  /** RegularExpression Id. */
  int SEMICOLON = 128;
  /** RegularExpression Id. */
  int LESS_THAN = 129;
  /** RegularExpression Id. */
  int EQUALS = 130;
  /** RegularExpression Id. */
  int GREATER_THAN = 131;
  /** RegularExpression Id. */
  int QUESTION = 132;
  /** RegularExpression Id. */
  int AT = 133;
  /** RegularExpression Id. */
  int CHARACTER = 134;
  /** RegularExpression Id. */
  int OPENING_BRACKET = 135;
  /** RegularExpression Id. */
  int CLOSING_BRACKET = 136;
  /** RegularExpression Id. */
  int UNDERSCORE = 137;
  /** RegularExpression Id. */
  int CHARACTER_LOWER = 138;
  /** RegularExpression Id. */
  int NUMBER = 139;
  /** RegularExpression Id. */
  int FLOAT = 140;
  /** RegularExpression Id. */
  int COMMENT = 141;
  /** RegularExpression Id. */
  int COMMENT_CLOSE_PARENTHESES = 142;
  /** RegularExpression Id. */
  int COMMENT_SPACE = 143;
  /** RegularExpression Id. */
  int COMMENT_DOUBLE_QUOTES = 144;
  /** RegularExpression Id. */
  int COMMENT_DOLLAR = 145;
  /** RegularExpression Id. */
  int COMMENT_SINGLE_QUOTE = 146;
  /** RegularExpression Id. */
  int COMMENT_LESS_THAN = 147;
  /** RegularExpression Id. */
  int COMMENT_GREATER_THAN = 148;
  /** RegularExpression Id. */
  int LINECOMMENT = 149;
  /** RegularExpression Id. */
  int VARIABLE_NUMBER = 150;
  /** RegularExpression Id. */
  int VARIABLE_FLOAT = 151;
  /** RegularExpression Id. */
  int VARIABLE_STRING = 152;
  /** RegularExpression Id. */
  int VARIABLE_SHARP = 153;
  /** RegularExpression Id. */
  int VARIABLE_AT = 154;
  /** RegularExpression Id. */
  int VARIABLE_OPENING_BRACKET = 155;
  /** RegularExpression Id. */
  int VARIABLE_CLOSING_BRACKET = 156;
  /** RegularExpression Id. */
  int SETVN_NUMBER = 157;
  /** RegularExpression Id. */
  int SETVN_OPENING_BRACKET = 158;
  /** RegularExpression Id. */
  int SETVN_CLOSING_BRACKET = 159;
  /** RegularExpression Id. */
  int SETVN_COMMA = 160;
  /** RegularExpression Id. */
  int SETVN_VARIABLE = 161;
  /** RegularExpression Id. */
  int PRINT_OPENING_BRACKET = 162;
  /** RegularExpression Id. */
  int PRINT_CLOSING_BRACKET = 163;
  /** RegularExpression Id. */
  int PRINT_MESSAGE = 164;
  /** RegularExpression Id. */
  int FILENAME = 165;
  /** RegularExpression Id. */
  int FILENAME_GREATER_THAN = 166;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STATE_COMMENT = 1;
  /** Lexical state. */
  int STATE_LINECOMMENT = 2;
  /** Lexical state. */
  int STATE_VARIABLE = 3;
  /** Lexical state. */
  int STATE_SETVN = 4;
  /** Lexical state. */
  int STATE_SETVN_VARIABLE = 5;
  /** Lexical state. */
  int STATE_PRINT = 6;
  /** Lexical state. */
  int STATE_PRINT_MESSAGE = 7;
  /** Lexical state. */
  int STATE_FILENAME = 8;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\u0000\"",
    "\"\\u0001\"",
    "\"\\u0002\"",
    "\"\\u0003\"",
    "\"\\u0004\"",
    "\"\\u0005\"",
    "\"\\u0006\"",
    "\"\\u0007\"",
    "\"\\b\"",
    "\"\\t\"",
    "\"\\u000b\"",
    "\"\\f\"",
    "\"\\r\"",
    "\"\\u000e\"",
    "\"\\u000f\"",
    "\"\\u0010\"",
    "\"\\u0011\"",
    "\"\\u0012\"",
    "\"\\u0013\"",
    "\"\\u0014\"",
    "\"\\u0015\"",
    "\"\\u0016\"",
    "\"\\u0017\"",
    "\"\\u0018\"",
    "\"\\u0019\"",
    "\"\\u001a\"",
    "\"\\u001b\"",
    "\"\\u001c\"",
    "\"\\u001d\"",
    "\"\\u001e\"",
    "\"\\u001f\"",
    "\" \"",
    "\"\\\"\"",
    "\"%\"",
    "\"!\"",
    "\"$\"",
    "\"\\\'\"",
    "\"\\\\\"",
    "\"^\"",
    "\"`\"",
    "\"{\"",
    "\"|\"",
    "\"}\"",
    "\"~\"",
    "\"BLOCK_SKIP\"",
    "\"SIGN_PLUS\"",
    "\"SIGN_MINUS\"",
    "\"VARIABLE_STRING\"",
    "\"NAME\"",
    "\"A\"",
    "\"B\"",
    "\"C\"",
    "\"D\"",
    "\"E\"",
    "\"F\"",
    "\"G\"",
    "\"H\"",
    "\"I\"",
    "\"J\"",
    "\"K\"",
    "\"L\"",
    "\"M\"",
    "\"N\"",
    "\"O\"",
    "\"P\"",
    "\"Q\"",
    "\"R\"",
    "\"S\"",
    "\"T\"",
    "\"U\"",
    "\"V\"",
    "\"W\"",
    "\"X\"",
    "\"Y\"",
    "\"Z\"",
    "\"GOTO\"",
    "\"IF\"",
    "\"THEN\"",
    "\"WHILE\"",
    "\"DO\"",
    "\"END\"",
    "\"SETVN\"",
    "\"AND\"",
    "\"OR\"",
    "\"XOR\"",
    "\"MOD\"",
    "\"EQ\"",
    "\"NE\"",
    "\"LT\"",
    "\"LE\"",
    "\"GT\"",
    "\"GE\"",
    "\"SIN\"",
    "\"COS\"",
    "\"TAN\"",
    "\"ASIN\"",
    "\"ACOS\"",
    "<ATAN>",
    "<SQRT>",
    "\"ABS\"",
    "\"BIN\"",
    "\"BCD\"",
    "<ROUND>",
    "\"FIX\"",
    "\"FUP\"",
    "\"LN\"",
    "\"EXP\"",
    "\"POW\"",
    "\"ADP\"",
    "<ATAN2>",
    "\"POPEN\"",
    "\"PCLOS\"",
    "\"BPRNT\"",
    "\"DPRNT\"",
    "\"\\n\"",
    "\"#\"",
    "\"&\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"+\"",
    "\",\"",
    "\"-\"",
    "\".\"",
    "\"/\"",
    "<DIGIT>",
    "\":\"",
    "\";\"",
    "\"<\"",
    "\"=\"",
    "\">\"",
    "\"?\"",
    "\"@\"",
    "<CHARACTER>",
    "\"[\"",
    "\"]\"",
    "\"_\"",
    "<CHARACTER_LOWER>",
    "<NUMBER>",
    "<FLOAT>",
    "<COMMENT>",
    "\")\"",
    "\" \"",
    "\"\\\"\"",
    "\"$\"",
    "\"\\\'\"",
    "\"<\"",
    "\">\"",
    "<LINECOMMENT>",
    "<VARIABLE_NUMBER>",
    "<VARIABLE_FLOAT>",
    "<VARIABLE_STRING>",
    "<VARIABLE_SHARP>",
    "<VARIABLE_AT>",
    "<VARIABLE_OPENING_BRACKET>",
    "<VARIABLE_CLOSING_BRACKET>",
    "<SETVN_NUMBER>",
    "<SETVN_OPENING_BRACKET>",
    "<SETVN_CLOSING_BRACKET>",
    "<SETVN_COMMA>",
    "<SETVN_VARIABLE>",
    "<PRINT_OPENING_BRACKET>",
    "<PRINT_CLOSING_BRACKET>",
    "<PRINT_MESSAGE>",
    "<FILENAME>",
    "\">\"",
  };

}
