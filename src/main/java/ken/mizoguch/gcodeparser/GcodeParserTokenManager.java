/* GcodeParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GcodeParserTokenManager.java */
package ken.mizoguch.gcodeparser;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
public class GcodeParserTokenManager implements GcodeParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(6, 0);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x83ffac4000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     { jjCheckNAddTwoStates(0, 1); }
                  }
                  else if (curChar == 35)
                     { jjCheckNAdd(2); }
                  break;
               case 0:
                  if ((0x83ffac4000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 1:
                  if (curChar == 35)
                     { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 0:
                  if ((0x87ffffffL & l) == 0L)
                     break;
                  kind = 164;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               case 3:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar != 93)
                     break;
                  kind = 164;
                  { jjCheckNAddTwoStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(0, 0);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 93)
                  {
                     if (kind > 163)
                        kind = 163;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 162)
                        kind = 162;
                  }
                  break;
               case 1:
                  if (curChar == 93)
                     kind = 163;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(1, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 157)
                        kind = 157;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 160)
                        kind = 160;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 157;
                  { jjCheckNAdd(0); }
                  break;
               case 3:
                  if (curChar == 44)
                     kind = 160;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 93)
                  {
                     if (kind > 159)
                        kind = 159;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 158)
                        kind = 158;
                  }
                  break;
               case 2:
                  if (curChar == 93)
                     kind = 159;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1, long active2){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 166);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff680000000000L & l) == 0L)
                     break;
                  kind = 165;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  kind = 165;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 142);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffcdd00000000L & l) == 0L)
                     break;
                  kind = 141;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffeafffffffL & l) == 0L)
                     break;
                  kind = 141;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc00000000000L) != 0L || (active1 & 0x20040010L) != 0L)
            return 10;
         if ((active1 & 0x8L) != 0L)
            return 4;
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x201300080000L) != 0L)
            return 21;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 115);
      case 35:
         return jjStopAtPos(0, 116);
      case 40:
         return jjStopAtPos(0, 118);
      case 41:
         return jjStopAtPos(0, 119);
      case 42:
         return jjStopAtPos(0, 120);
      case 43:
         return jjStopAtPos(0, 121);
      case 44:
         return jjStopAtPos(0, 122);
      case 45:
         return jjStopAtPos(0, 123);
      case 47:
         return jjStopAtPos(0, 125);
      case 58:
         return jjStopAtPos(0, 127);
      case 59:
         return jjStopAtPos(0, 128);
      case 60:
         return jjStopAtPos(0, 129);
      case 61:
         return jjStopAtPos(0, 130);
      case 62:
         return jjStopAtPos(0, 131);
      case 64:
         return jjStopAtPos(0, 133);
      case 65:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x201300080000L);
      case 66:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x2006000000000L);
      case 67:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 68:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000010000L);
      case 69:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000820000L);
      case 70:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000000000L);
      case 71:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18001000L);
      case 72:
         return jjStopAtPos(0, 57);
      case 73:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 74:
         return jjStopAtPos(0, 59);
      case 75:
         return jjStopAtPos(0, 60);
      case 76:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40006000000L);
      case 77:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 78:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x1000000L);
      case 79:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 80:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1900000000000L);
      case 81:
         return jjStopAtPos(0, 66);
      case 82:
         return jjStartNfaWithStates_0(0, 67, 4);
      case 83:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0xc00000000000L, 0x20040000L);
      case 84:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80004000L);
      case 85:
         return jjStopAtPos(0, 70);
      case 86:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 87:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 88:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 89:
         return jjStopAtPos(0, 74);
      case 90:
         return jjStopAtPos(0, 75);
      case 91:
         return jjStopAtPos(0, 135);
      case 93:
         return jjStopAtPos(0, 136);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0x80000000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1004200000000L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000L);
      case 69:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
      case 70:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0x12020000000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa0000L);
      case 79:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x900040601000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000000000000L);
      case 81:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 82:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 84:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(2, 86);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 102);
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100008000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 95);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x200000000L);
      case 80:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 105);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 107);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 109);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L);
      case 82:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(2, 85);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x6000000000000L);
      case 83:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 100);
         break;
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x41000L);
      case 87:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 108);
         break;
      case 88:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 104);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
      case 78:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(3, 78);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000L, active1, 0x6000000000000L);
      case 79:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(3, 76);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L);
      case 83:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 97);
         break;
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(4, 79);
         break;
      case 75:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(4, 82);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 111);
         break;
      case 83:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 112);
         break;
      case 84:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(4, 113);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(4, 114);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x1400000000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 75:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      case 83:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(8, 46);
         break;
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 80:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(9, 45);
         break;
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(9, 47);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(14, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 30;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     { jjCheckNAddStates(2, 4); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(1); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAddStates(2, 4); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if (curChar != 46)
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(18); }
                  break;
               case 24:
                  if (curChar == 50 && kind > 110)
                     kind = 110;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 0:
                  if (curChar == 65)
                     { jjAddStates(5, 8); }
                  else if (curChar == 83)
                     { jjAddStates(9, 10); }
                  else if (curChar == 82)
                     { jjAddStates(11, 12); }
                  break;
               case 4:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 78)
                     { jjCheckNAdd(3); }
                  break;
               case 21:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 28;
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if (curChar == 84)
                     { jjCheckNAdd(20); }
                  break;
               case 2:
                  if (curChar == 82)
                     { jjAddStates(11, 12); }
                  break;
               case 3:
                  if (curChar == 68)
                     kind = 103;
                  break;
               case 5:
                  if (curChar == 78)
                     { jjCheckNAdd(3); }
                  break;
               case 6:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 83)
                     { jjAddStates(9, 10); }
                  break;
               case 9:
                  if (curChar == 82 && kind > 99)
                     kind = 99;
                  break;
               case 11:
                  if (curChar == 84 && kind > 99)
                     kind = 99;
                  break;
               case 12:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 19:
                  if (curChar == 65)
                     { jjAddStates(5, 8); }
                  break;
               case 20:
                  if (curChar == 78 && kind > 98)
                     kind = 98;
                  break;
               case 22:
                  if (curChar == 65)
                     { jjCheckNAdd(20); }
                  break;
               case 23:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
               case 27:
                  if (curChar == 78)
                     { jjCheckNAdd(24); }
                  break;
               case 26:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xf3ffec4000000000L & l) == 0L)
                     break;
                  kind = 161;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 150)
                        kind = 150;
                     { jjCheckNAddStates(13, 15); }
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 153)
                        kind = 153;
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0xf3ffec4000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 35)
                     kind = 153;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  { jjCheckNAddStates(13, 15); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar != 46)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAdd(12); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x87fffffeL & l) != 0L)
                     { jjCheckNAdd(3); }
                  else if (curChar == 93)
                  {
                     if (kind > 156)
                        kind = 156;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 155)
                        kind = 155;
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 154)
                        kind = 154;
                  }
                  break;
               case 2:
                  if ((0x87fffffeL & l) != 0L)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 64)
                     kind = 154;
                  break;
               case 6:
                  if (curChar == 91)
                     kind = 155;
                  break;
               case 7:
                  if (curChar == 93)
                     kind = 156;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  kind = 149;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 149;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\101", "\102", "\103", 
"\104", "\105", "\106", "\107", "\110", "\111", "\112", "\113", "\114", "\115", 
"\116", "\117", "\120", "\121", "\122", "\123", "\124", "\125", "\126", "\127", 
"\130", "\131", "\132", "\107\117\124\117", "\111\106", "\124\110\105\116", 
"\127\110\111\114\105", "\104\117", "\105\116\104", "\123\105\124\126\116", "\101\116\104", 
"\117\122", "\130\117\122", "\115\117\104", "\105\121", "\116\105", "\114\124", 
"\114\105", "\107\124", "\107\105", "\123\111\116", "\103\117\123", "\124\101\116", 
"\101\123\111\116", "\101\103\117\123", null, null, "\101\102\123", "\102\111\116", 
"\102\103\104", null, "\106\111\130", "\106\125\120", "\114\116", "\105\130\120", 
"\120\117\127", "\101\104\120", null, "\120\117\120\105\116", "\120\103\114\117\123", 
"\102\120\122\116\124", "\104\120\122\116\124", "\12", "\43", null, "\50", "\51", "\52", "\53", "\54", 
"\55", null, "\57", null, "\72", "\73", "\74", "\75", "\76", null, "\100", null, 
"\133", "\135", null, null, null, null, null, "\51", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\76", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   4, 5, 15, 16, 17, 21, 23, 26, 29, 10, 13, 4, 7, 9, 10, 11, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while ((curChar < 64 && (0xb7fffffbffL & (1L << curChar)) != 0L) || 
                 (curChar >> 6) == 1 && (0x7800000150000000L & (1L << (curChar & 077))) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 149;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 164;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GcodeParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GcodeParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 30; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "STATE_COMMENT",
   "STATE_LINECOMMENT",
   "STATE_VARIABLE",
   "STATE_SETVN",
   "STATE_SETVN_VARIABLE",
   "STATE_PRINT",
   "STATE_PRINT_MESSAGE",
   "STATE_FILENAME",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, -1, 3, -1, 1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 2, 8, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, 
   0, 0, 0, -1, -1, 0, 0, -1, 5, 0, 5, 4, 7, 0, 6, -1, 0, 
};
static final long[] jjtoToken = {
   0xfffc000000000001L, 0xafdfffffffffffffL, 0x7fffe079afL, 
};
static final long[] jjtoSkip = {
   0x3fffffffffffeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3e00000000000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[30];
    private final int[] jjstateSet = new int[2 * 30];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
